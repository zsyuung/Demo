// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chess.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chess.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chess_protocal {

namespace {

const ::google::protobuf::Descriptor* login_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_response_reflection_ = NULL;
const ::google::protobuf::Descriptor* select_hall_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  select_hall_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* select_hall_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  select_hall_response_reflection_ = NULL;
const ::google::protobuf::Descriptor* select_table_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  select_table_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* select_table_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  select_table_response_reflection_ = NULL;
const ::google::protobuf::Descriptor* playing_chess_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playing_chess_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* playing_chess_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playing_chess_response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chess_2eproto() {
  protobuf_AddDesc_chess_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chess.proto");
  GOOGLE_CHECK(file != NULL);
  login_request_descriptor_ = file->message_type(0);
  static const int login_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_request, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_request, password_),
  };
  login_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_request_descriptor_,
      login_request::default_instance_,
      login_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_request));
  login_response_descriptor_ = file->message_type(1);
  static const int login_response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_response, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_response, data_),
  };
  login_response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_response_descriptor_,
      login_response::default_instance_,
      login_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_response));
  select_hall_request_descriptor_ = file->message_type(2);
  static const int select_hall_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_hall_request, hall_number_),
  };
  select_hall_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      select_hall_request_descriptor_,
      select_hall_request::default_instance_,
      select_hall_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_hall_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_hall_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(select_hall_request));
  select_hall_response_descriptor_ = file->message_type(3);
  static const int select_hall_response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_hall_response, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_hall_response, data_),
  };
  select_hall_response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      select_hall_response_descriptor_,
      select_hall_response::default_instance_,
      select_hall_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_hall_response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_hall_response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(select_hall_response));
  select_table_request_descriptor_ = file->message_type(4);
  static const int select_table_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_table_request, table_number_),
  };
  select_table_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      select_table_request_descriptor_,
      select_table_request::default_instance_,
      select_table_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_table_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_table_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(select_table_request));
  select_table_response_descriptor_ = file->message_type(5);
  static const int select_table_response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_table_response, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_table_response, data_),
  };
  select_table_response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      select_table_response_descriptor_,
      select_table_response::default_instance_,
      select_table_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_table_response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(select_table_response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(select_table_response));
  playing_chess_request_descriptor_ = file->message_type(6);
  static const int playing_chess_request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_request, hall_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_request, table_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_request, game_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_request, x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_request, y_pos_),
  };
  playing_chess_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playing_chess_request_descriptor_,
      playing_chess_request::default_instance_,
      playing_chess_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playing_chess_request));
  playing_chess_response_descriptor_ = file->message_type(7);
  static const int playing_chess_response_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_response, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_response, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_response, game_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_response, x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_response, y_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_response, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_response, columns_),
  };
  playing_chess_response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playing_chess_response_descriptor_,
      playing_chess_response::default_instance_,
      playing_chess_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playing_chess_response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playing_chess_response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chess_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_request_descriptor_, &login_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_response_descriptor_, &login_response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    select_hall_request_descriptor_, &select_hall_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    select_hall_response_descriptor_, &select_hall_response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    select_table_request_descriptor_, &select_table_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    select_table_response_descriptor_, &select_table_response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playing_chess_request_descriptor_, &playing_chess_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playing_chess_response_descriptor_, &playing_chess_response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chess_2eproto() {
  delete login_request::default_instance_;
  delete login_request_reflection_;
  delete login_response::default_instance_;
  delete login_response_reflection_;
  delete select_hall_request::default_instance_;
  delete select_hall_request_reflection_;
  delete select_hall_response::default_instance_;
  delete select_hall_response_reflection_;
  delete select_table_request::default_instance_;
  delete select_table_request_reflection_;
  delete select_table_response::default_instance_;
  delete select_table_response_reflection_;
  delete playing_chess_request::default_instance_;
  delete playing_chess_request_reflection_;
  delete playing_chess_response::default_instance_;
  delete playing_chess_response_reflection_;
}

void protobuf_AddDesc_chess_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013chess.proto\022\016chess_protocal\"1\n\rlogin_r"
    "equest\022\016\n\006UserID\030\001 \002(\t\022\020\n\010PassWord\030\002 \002(\t"
    "\"5\n\016login_response\022\025\n\rresponse_code\030\001 \002("
    "\005\022\014\n\004data\030\002 \001(\t\"*\n\023select_hall_request\022\023"
    "\n\013hall_number\030\001 \002(\005\";\n\024select_hall_respo"
    "nse\022\025\n\rresponse_code\030\001 \002(\005\022\014\n\004data\030\002 \001(\t"
    "\",\n\024select_table_request\022\024\n\014table_number"
    "\030\001 \002(\005\"<\n\025select_table_response\022\025\n\rrespo"
    "nse_code\030\001 \002(\005\022\014\n\004data\030\002 \001(\t\"s\n\025playing_"
    "chess_request\022\023\n\013hall_number\030\001 \002(\005\022\024\n\014ta"
    "ble_number\030\002 \002(\005\022\021\n\tgame_stat\030\003 \001(\005\022\r\n\005x"
    "_pos\030\004 \001(\005\022\r\n\005y_pos\030\005 \001(\005\"\215\001\n\026playing_ch"
    "ess_response\022\025\n\rresponse_code\030\001 \002(\005\022\014\n\004d"
    "ata\030\002 \001(\t\022\021\n\tgame_stat\030\003 \002(\005\022\r\n\005x_pos\030\004 "
    "\001(\005\022\r\n\005y_pos\030\005 \001(\005\022\014\n\004rows\030\006 \001(\005\022\017\n\007colu"
    "mns\030\007 \001(\005", 609);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chess.proto", &protobuf_RegisterTypes);
  login_request::default_instance_ = new login_request();
  login_response::default_instance_ = new login_response();
  select_hall_request::default_instance_ = new select_hall_request();
  select_hall_response::default_instance_ = new select_hall_response();
  select_table_request::default_instance_ = new select_table_request();
  select_table_response::default_instance_ = new select_table_response();
  playing_chess_request::default_instance_ = new playing_chess_request();
  playing_chess_response::default_instance_ = new playing_chess_response();
  login_request::default_instance_->InitAsDefaultInstance();
  login_response::default_instance_->InitAsDefaultInstance();
  select_hall_request::default_instance_->InitAsDefaultInstance();
  select_hall_response::default_instance_->InitAsDefaultInstance();
  select_table_request::default_instance_->InitAsDefaultInstance();
  select_table_response::default_instance_->InitAsDefaultInstance();
  playing_chess_request::default_instance_->InitAsDefaultInstance();
  playing_chess_response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chess_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chess_2eproto {
  StaticDescriptorInitializer_chess_2eproto() {
    protobuf_AddDesc_chess_2eproto();
  }
} static_descriptor_initializer_chess_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int login_request::kUserIDFieldNumber;
const int login_request::kPassWordFieldNumber;
#endif  // !_MSC_VER

login_request::login_request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess_protocal.login_request)
}

void login_request::InitAsDefaultInstance() {
}

login_request::login_request(const login_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess_protocal.login_request)
}

void login_request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_request::~login_request() {
  // @@protoc_insertion_point(destructor:chess_protocal.login_request)
  SharedDtor();
}

void login_request::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void login_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_request_descriptor_;
}

const login_request& login_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

login_request* login_request::default_instance_ = NULL;

login_request* login_request::New() const {
  return new login_request;
}

void login_request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess_protocal.login_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string UserID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PassWord;
        break;
      }

      // required string PassWord = 2;
      case 2: {
        if (tag == 18) {
         parse_PassWord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess_protocal.login_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess_protocal.login_request)
  return false;
#undef DO_
}

void login_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess_protocal.login_request)
  // required string UserID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required string PassWord = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chess_protocal.login_request)
}

::google::protobuf::uint8* login_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess_protocal.login_request)
  // required string UserID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string PassWord = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess_protocal.login_request)
  return target;
}

int login_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string PassWord = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_request::MergeFrom(const login_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_request::CopyFrom(const login_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void login_request::Swap(login_request* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_request_descriptor_;
  metadata.reflection = login_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_response::kResponseCodeFieldNumber;
const int login_response::kDataFieldNumber;
#endif  // !_MSC_VER

login_response::login_response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess_protocal.login_response)
}

void login_response::InitAsDefaultInstance() {
}

login_response::login_response(const login_response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess_protocal.login_response)
}

void login_response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_code_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_response::~login_response() {
  // @@protoc_insertion_point(destructor:chess_protocal.login_response)
  SharedDtor();
}

void login_response::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void login_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_response_descriptor_;
}

const login_response& login_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

login_response* login_response::default_instance_ = NULL;

login_response* login_response::New() const {
  return new login_response;
}

void login_response::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    response_code_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess_protocal.login_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 response_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_code_)));
          set_has_response_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess_protocal.login_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess_protocal.login_response)
  return false;
#undef DO_
}

void login_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess_protocal.login_response)
  // required int32 response_code = 1;
  if (has_response_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->response_code(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chess_protocal.login_response)
}

::google::protobuf::uint8* login_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess_protocal.login_response)
  // required int32 response_code = 1;
  if (has_response_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->response_code(), target);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess_protocal.login_response)
  return target;
}

int login_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 response_code = 1;
    if (has_response_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_code());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_response::MergeFrom(const login_response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_code()) {
      set_response_code(from.response_code());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_response::CopyFrom(const login_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void login_response::Swap(login_response* other) {
  if (other != this) {
    std::swap(response_code_, other->response_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_response_descriptor_;
  metadata.reflection = login_response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int select_hall_request::kHallNumberFieldNumber;
#endif  // !_MSC_VER

select_hall_request::select_hall_request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess_protocal.select_hall_request)
}

void select_hall_request::InitAsDefaultInstance() {
}

select_hall_request::select_hall_request(const select_hall_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess_protocal.select_hall_request)
}

void select_hall_request::SharedCtor() {
  _cached_size_ = 0;
  hall_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

select_hall_request::~select_hall_request() {
  // @@protoc_insertion_point(destructor:chess_protocal.select_hall_request)
  SharedDtor();
}

void select_hall_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void select_hall_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* select_hall_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_hall_request_descriptor_;
}

const select_hall_request& select_hall_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

select_hall_request* select_hall_request::default_instance_ = NULL;

select_hall_request* select_hall_request::New() const {
  return new select_hall_request;
}

void select_hall_request::Clear() {
  hall_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool select_hall_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess_protocal.select_hall_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hall_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hall_number_)));
          set_has_hall_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess_protocal.select_hall_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess_protocal.select_hall_request)
  return false;
#undef DO_
}

void select_hall_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess_protocal.select_hall_request)
  // required int32 hall_number = 1;
  if (has_hall_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hall_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chess_protocal.select_hall_request)
}

::google::protobuf::uint8* select_hall_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess_protocal.select_hall_request)
  // required int32 hall_number = 1;
  if (has_hall_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hall_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess_protocal.select_hall_request)
  return target;
}

int select_hall_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hall_number = 1;
    if (has_hall_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hall_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void select_hall_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const select_hall_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const select_hall_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void select_hall_request::MergeFrom(const select_hall_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hall_number()) {
      set_hall_number(from.hall_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void select_hall_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_hall_request::CopyFrom(const select_hall_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_hall_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void select_hall_request::Swap(select_hall_request* other) {
  if (other != this) {
    std::swap(hall_number_, other->hall_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata select_hall_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = select_hall_request_descriptor_;
  metadata.reflection = select_hall_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int select_hall_response::kResponseCodeFieldNumber;
const int select_hall_response::kDataFieldNumber;
#endif  // !_MSC_VER

select_hall_response::select_hall_response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess_protocal.select_hall_response)
}

void select_hall_response::InitAsDefaultInstance() {
}

select_hall_response::select_hall_response(const select_hall_response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess_protocal.select_hall_response)
}

void select_hall_response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_code_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

select_hall_response::~select_hall_response() {
  // @@protoc_insertion_point(destructor:chess_protocal.select_hall_response)
  SharedDtor();
}

void select_hall_response::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void select_hall_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* select_hall_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_hall_response_descriptor_;
}

const select_hall_response& select_hall_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

select_hall_response* select_hall_response::default_instance_ = NULL;

select_hall_response* select_hall_response::New() const {
  return new select_hall_response;
}

void select_hall_response::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    response_code_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool select_hall_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess_protocal.select_hall_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 response_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_code_)));
          set_has_response_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess_protocal.select_hall_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess_protocal.select_hall_response)
  return false;
#undef DO_
}

void select_hall_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess_protocal.select_hall_response)
  // required int32 response_code = 1;
  if (has_response_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->response_code(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chess_protocal.select_hall_response)
}

::google::protobuf::uint8* select_hall_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess_protocal.select_hall_response)
  // required int32 response_code = 1;
  if (has_response_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->response_code(), target);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess_protocal.select_hall_response)
  return target;
}

int select_hall_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 response_code = 1;
    if (has_response_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_code());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void select_hall_response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const select_hall_response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const select_hall_response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void select_hall_response::MergeFrom(const select_hall_response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_code()) {
      set_response_code(from.response_code());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void select_hall_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_hall_response::CopyFrom(const select_hall_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_hall_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void select_hall_response::Swap(select_hall_response* other) {
  if (other != this) {
    std::swap(response_code_, other->response_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata select_hall_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = select_hall_response_descriptor_;
  metadata.reflection = select_hall_response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int select_table_request::kTableNumberFieldNumber;
#endif  // !_MSC_VER

select_table_request::select_table_request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess_protocal.select_table_request)
}

void select_table_request::InitAsDefaultInstance() {
}

select_table_request::select_table_request(const select_table_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess_protocal.select_table_request)
}

void select_table_request::SharedCtor() {
  _cached_size_ = 0;
  table_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

select_table_request::~select_table_request() {
  // @@protoc_insertion_point(destructor:chess_protocal.select_table_request)
  SharedDtor();
}

void select_table_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void select_table_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* select_table_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_table_request_descriptor_;
}

const select_table_request& select_table_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

select_table_request* select_table_request::default_instance_ = NULL;

select_table_request* select_table_request::New() const {
  return new select_table_request;
}

void select_table_request::Clear() {
  table_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool select_table_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess_protocal.select_table_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 table_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_number_)));
          set_has_table_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess_protocal.select_table_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess_protocal.select_table_request)
  return false;
#undef DO_
}

void select_table_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess_protocal.select_table_request)
  // required int32 table_number = 1;
  if (has_table_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chess_protocal.select_table_request)
}

::google::protobuf::uint8* select_table_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess_protocal.select_table_request)
  // required int32 table_number = 1;
  if (has_table_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess_protocal.select_table_request)
  return target;
}

int select_table_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 table_number = 1;
    if (has_table_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void select_table_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const select_table_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const select_table_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void select_table_request::MergeFrom(const select_table_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_number()) {
      set_table_number(from.table_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void select_table_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_table_request::CopyFrom(const select_table_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_table_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void select_table_request::Swap(select_table_request* other) {
  if (other != this) {
    std::swap(table_number_, other->table_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata select_table_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = select_table_request_descriptor_;
  metadata.reflection = select_table_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int select_table_response::kResponseCodeFieldNumber;
const int select_table_response::kDataFieldNumber;
#endif  // !_MSC_VER

select_table_response::select_table_response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess_protocal.select_table_response)
}

void select_table_response::InitAsDefaultInstance() {
}

select_table_response::select_table_response(const select_table_response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess_protocal.select_table_response)
}

void select_table_response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_code_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

select_table_response::~select_table_response() {
  // @@protoc_insertion_point(destructor:chess_protocal.select_table_response)
  SharedDtor();
}

void select_table_response::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void select_table_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* select_table_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return select_table_response_descriptor_;
}

const select_table_response& select_table_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

select_table_response* select_table_response::default_instance_ = NULL;

select_table_response* select_table_response::New() const {
  return new select_table_response;
}

void select_table_response::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    response_code_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool select_table_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess_protocal.select_table_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 response_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_code_)));
          set_has_response_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess_protocal.select_table_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess_protocal.select_table_response)
  return false;
#undef DO_
}

void select_table_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess_protocal.select_table_response)
  // required int32 response_code = 1;
  if (has_response_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->response_code(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chess_protocal.select_table_response)
}

::google::protobuf::uint8* select_table_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess_protocal.select_table_response)
  // required int32 response_code = 1;
  if (has_response_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->response_code(), target);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess_protocal.select_table_response)
  return target;
}

int select_table_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 response_code = 1;
    if (has_response_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_code());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void select_table_response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const select_table_response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const select_table_response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void select_table_response::MergeFrom(const select_table_response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_code()) {
      set_response_code(from.response_code());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void select_table_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void select_table_response::CopyFrom(const select_table_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool select_table_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void select_table_response::Swap(select_table_response* other) {
  if (other != this) {
    std::swap(response_code_, other->response_code_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata select_table_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = select_table_response_descriptor_;
  metadata.reflection = select_table_response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int playing_chess_request::kHallNumberFieldNumber;
const int playing_chess_request::kTableNumberFieldNumber;
const int playing_chess_request::kGameStatFieldNumber;
const int playing_chess_request::kXPosFieldNumber;
const int playing_chess_request::kYPosFieldNumber;
#endif  // !_MSC_VER

playing_chess_request::playing_chess_request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess_protocal.playing_chess_request)
}

void playing_chess_request::InitAsDefaultInstance() {
}

playing_chess_request::playing_chess_request(const playing_chess_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess_protocal.playing_chess_request)
}

void playing_chess_request::SharedCtor() {
  _cached_size_ = 0;
  hall_number_ = 0;
  table_number_ = 0;
  game_stat_ = 0;
  x_pos_ = 0;
  y_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playing_chess_request::~playing_chess_request() {
  // @@protoc_insertion_point(destructor:chess_protocal.playing_chess_request)
  SharedDtor();
}

void playing_chess_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void playing_chess_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playing_chess_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playing_chess_request_descriptor_;
}

const playing_chess_request& playing_chess_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

playing_chess_request* playing_chess_request::default_instance_ = NULL;

playing_chess_request* playing_chess_request::New() const {
  return new playing_chess_request;
}

void playing_chess_request::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<playing_chess_request*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(hall_number_, y_pos_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playing_chess_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess_protocal.playing_chess_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hall_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hall_number_)));
          set_has_hall_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_table_number;
        break;
      }

      // required int32 table_number = 2;
      case 2: {
        if (tag == 16) {
         parse_table_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_number_)));
          set_has_table_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_game_stat;
        break;
      }

      // optional int32 game_stat = 3;
      case 3: {
        if (tag == 24) {
         parse_game_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_stat_)));
          set_has_game_stat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_x_pos;
        break;
      }

      // optional int32 x_pos = 4;
      case 4: {
        if (tag == 32) {
         parse_x_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_pos_)));
          set_has_x_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_y_pos;
        break;
      }

      // optional int32 y_pos = 5;
      case 5: {
        if (tag == 40) {
         parse_y_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_pos_)));
          set_has_y_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess_protocal.playing_chess_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess_protocal.playing_chess_request)
  return false;
#undef DO_
}

void playing_chess_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess_protocal.playing_chess_request)
  // required int32 hall_number = 1;
  if (has_hall_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hall_number(), output);
  }

  // required int32 table_number = 2;
  if (has_table_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table_number(), output);
  }

  // optional int32 game_stat = 3;
  if (has_game_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_stat(), output);
  }

  // optional int32 x_pos = 4;
  if (has_x_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x_pos(), output);
  }

  // optional int32 y_pos = 5;
  if (has_y_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chess_protocal.playing_chess_request)
}

::google::protobuf::uint8* playing_chess_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess_protocal.playing_chess_request)
  // required int32 hall_number = 1;
  if (has_hall_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hall_number(), target);
  }

  // required int32 table_number = 2;
  if (has_table_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table_number(), target);
  }

  // optional int32 game_stat = 3;
  if (has_game_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_stat(), target);
  }

  // optional int32 x_pos = 4;
  if (has_x_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->x_pos(), target);
  }

  // optional int32 y_pos = 5;
  if (has_y_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->y_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess_protocal.playing_chess_request)
  return target;
}

int playing_chess_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hall_number = 1;
    if (has_hall_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hall_number());
    }

    // required int32 table_number = 2;
    if (has_table_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_number());
    }

    // optional int32 game_stat = 3;
    if (has_game_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_stat());
    }

    // optional int32 x_pos = 4;
    if (has_x_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_pos());
    }

    // optional int32 y_pos = 5;
    if (has_y_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playing_chess_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playing_chess_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playing_chess_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playing_chess_request::MergeFrom(const playing_chess_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hall_number()) {
      set_hall_number(from.hall_number());
    }
    if (from.has_table_number()) {
      set_table_number(from.table_number());
    }
    if (from.has_game_stat()) {
      set_game_stat(from.game_stat());
    }
    if (from.has_x_pos()) {
      set_x_pos(from.x_pos());
    }
    if (from.has_y_pos()) {
      set_y_pos(from.y_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playing_chess_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playing_chess_request::CopyFrom(const playing_chess_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playing_chess_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void playing_chess_request::Swap(playing_chess_request* other) {
  if (other != this) {
    std::swap(hall_number_, other->hall_number_);
    std::swap(table_number_, other->table_number_);
    std::swap(game_stat_, other->game_stat_);
    std::swap(x_pos_, other->x_pos_);
    std::swap(y_pos_, other->y_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playing_chess_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playing_chess_request_descriptor_;
  metadata.reflection = playing_chess_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int playing_chess_response::kResponseCodeFieldNumber;
const int playing_chess_response::kDataFieldNumber;
const int playing_chess_response::kGameStatFieldNumber;
const int playing_chess_response::kXPosFieldNumber;
const int playing_chess_response::kYPosFieldNumber;
const int playing_chess_response::kRowsFieldNumber;
const int playing_chess_response::kColumnsFieldNumber;
#endif  // !_MSC_VER

playing_chess_response::playing_chess_response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chess_protocal.playing_chess_response)
}

void playing_chess_response::InitAsDefaultInstance() {
}

playing_chess_response::playing_chess_response(const playing_chess_response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chess_protocal.playing_chess_response)
}

void playing_chess_response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_code_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_stat_ = 0;
  x_pos_ = 0;
  y_pos_ = 0;
  rows_ = 0;
  columns_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playing_chess_response::~playing_chess_response() {
  // @@protoc_insertion_point(destructor:chess_protocal.playing_chess_response)
  SharedDtor();
}

void playing_chess_response::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void playing_chess_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playing_chess_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playing_chess_response_descriptor_;
}

const playing_chess_response& playing_chess_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chess_2eproto();
  return *default_instance_;
}

playing_chess_response* playing_chess_response::default_instance_ = NULL;

playing_chess_response* playing_chess_response::New() const {
  return new playing_chess_response;
}

void playing_chess_response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<playing_chess_response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(response_code_, columns_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playing_chess_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chess_protocal.playing_chess_response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 response_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_code_)));
          set_has_response_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_game_stat;
        break;
      }

      // required int32 game_stat = 3;
      case 3: {
        if (tag == 24) {
         parse_game_stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_stat_)));
          set_has_game_stat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_x_pos;
        break;
      }

      // optional int32 x_pos = 4;
      case 4: {
        if (tag == 32) {
         parse_x_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_pos_)));
          set_has_x_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_y_pos;
        break;
      }

      // optional int32 y_pos = 5;
      case 5: {
        if (tag == 40) {
         parse_y_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_pos_)));
          set_has_y_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rows;
        break;
      }

      // optional int32 rows = 6;
      case 6: {
        if (tag == 48) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_columns;
        break;
      }

      // optional int32 columns = 7;
      case 7: {
        if (tag == 56) {
         parse_columns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &columns_)));
          set_has_columns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chess_protocal.playing_chess_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chess_protocal.playing_chess_response)
  return false;
#undef DO_
}

void playing_chess_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chess_protocal.playing_chess_response)
  // required int32 response_code = 1;
  if (has_response_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->response_code(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // required int32 game_stat = 3;
  if (has_game_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_stat(), output);
  }

  // optional int32 x_pos = 4;
  if (has_x_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x_pos(), output);
  }

  // optional int32 y_pos = 5;
  if (has_y_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y_pos(), output);
  }

  // optional int32 rows = 6;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rows(), output);
  }

  // optional int32 columns = 7;
  if (has_columns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->columns(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chess_protocal.playing_chess_response)
}

::google::protobuf::uint8* playing_chess_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess_protocal.playing_chess_response)
  // required int32 response_code = 1;
  if (has_response_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->response_code(), target);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // required int32 game_stat = 3;
  if (has_game_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_stat(), target);
  }

  // optional int32 x_pos = 4;
  if (has_x_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->x_pos(), target);
  }

  // optional int32 y_pos = 5;
  if (has_y_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->y_pos(), target);
  }

  // optional int32 rows = 6;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rows(), target);
  }

  // optional int32 columns = 7;
  if (has_columns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->columns(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess_protocal.playing_chess_response)
  return target;
}

int playing_chess_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 response_code = 1;
    if (has_response_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_code());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // required int32 game_stat = 3;
    if (has_game_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_stat());
    }

    // optional int32 x_pos = 4;
    if (has_x_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_pos());
    }

    // optional int32 y_pos = 5;
    if (has_y_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_pos());
    }

    // optional int32 rows = 6;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rows());
    }

    // optional int32 columns = 7;
    if (has_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->columns());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playing_chess_response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playing_chess_response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playing_chess_response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playing_chess_response::MergeFrom(const playing_chess_response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_code()) {
      set_response_code(from.response_code());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_game_stat()) {
      set_game_stat(from.game_stat());
    }
    if (from.has_x_pos()) {
      set_x_pos(from.x_pos());
    }
    if (from.has_y_pos()) {
      set_y_pos(from.y_pos());
    }
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_columns()) {
      set_columns(from.columns());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playing_chess_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playing_chess_response::CopyFrom(const playing_chess_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playing_chess_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void playing_chess_response::Swap(playing_chess_response* other) {
  if (other != this) {
    std::swap(response_code_, other->response_code_);
    std::swap(data_, other->data_);
    std::swap(game_stat_, other->game_stat_);
    std::swap(x_pos_, other->x_pos_);
    std::swap(y_pos_, other->y_pos_);
    std::swap(rows_, other->rows_);
    std::swap(columns_, other->columns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playing_chess_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playing_chess_response_descriptor_;
  metadata.reflection = playing_chess_response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chess_protocal

// @@protoc_insertion_point(global_scope)
