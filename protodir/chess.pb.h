// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chess.proto

#ifndef PROTOBUF_chess_2eproto__INCLUDED
#define PROTOBUF_chess_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace chess_protocal {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chess_2eproto();
void protobuf_AssignDesc_chess_2eproto();
void protobuf_ShutdownFile_chess_2eproto();

class login_request;
class login_response;
class select_hall_request;
class select_hall_response;
class select_table_request;
class select_table_response;
class playing_chess_request;
class playing_chess_response;

// ===================================================================

class login_request : public ::google::protobuf::Message {
 public:
  login_request();
  virtual ~login_request();

  login_request(const login_request& from);

  inline login_request& operator=(const login_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_request& default_instance();

  void Swap(login_request* other);

  // implements Message ----------------------------------------------

  login_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login_request& from);
  void MergeFrom(const login_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string UserID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // required string PassWord = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPassWordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:chess_protocal.login_request)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* userid_;
  ::std::string* password_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static login_request* default_instance_;
};
// -------------------------------------------------------------------

class login_response : public ::google::protobuf::Message {
 public:
  login_response();
  virtual ~login_response();

  login_response(const login_response& from);

  inline login_response& operator=(const login_response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const login_response& default_instance();

  void Swap(login_response* other);

  // implements Message ----------------------------------------------

  login_response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const login_response& from);
  void MergeFrom(const login_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 response_code = 1;
  inline bool has_response_code() const;
  inline void clear_response_code();
  static const int kResponseCodeFieldNumber = 1;
  inline ::google::protobuf::int32 response_code() const;
  inline void set_response_code(::google::protobuf::int32 value);

  // optional string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:chess_protocal.login_response)
 private:
  inline void set_has_response_code();
  inline void clear_has_response_code();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  ::google::protobuf::int32 response_code_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static login_response* default_instance_;
};
// -------------------------------------------------------------------

class select_hall_request : public ::google::protobuf::Message {
 public:
  select_hall_request();
  virtual ~select_hall_request();

  select_hall_request(const select_hall_request& from);

  inline select_hall_request& operator=(const select_hall_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const select_hall_request& default_instance();

  void Swap(select_hall_request* other);

  // implements Message ----------------------------------------------

  select_hall_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const select_hall_request& from);
  void MergeFrom(const select_hall_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hall_number = 1;
  inline bool has_hall_number() const;
  inline void clear_hall_number();
  static const int kHallNumberFieldNumber = 1;
  inline ::google::protobuf::int32 hall_number() const;
  inline void set_hall_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chess_protocal.select_hall_request)
 private:
  inline void set_has_hall_number();
  inline void clear_has_hall_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 hall_number_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static select_hall_request* default_instance_;
};
// -------------------------------------------------------------------

class select_hall_response : public ::google::protobuf::Message {
 public:
  select_hall_response();
  virtual ~select_hall_response();

  select_hall_response(const select_hall_response& from);

  inline select_hall_response& operator=(const select_hall_response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const select_hall_response& default_instance();

  void Swap(select_hall_response* other);

  // implements Message ----------------------------------------------

  select_hall_response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const select_hall_response& from);
  void MergeFrom(const select_hall_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 response_code = 1;
  inline bool has_response_code() const;
  inline void clear_response_code();
  static const int kResponseCodeFieldNumber = 1;
  inline ::google::protobuf::int32 response_code() const;
  inline void set_response_code(::google::protobuf::int32 value);

  // optional string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:chess_protocal.select_hall_response)
 private:
  inline void set_has_response_code();
  inline void clear_has_response_code();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  ::google::protobuf::int32 response_code_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static select_hall_response* default_instance_;
};
// -------------------------------------------------------------------

class select_table_request : public ::google::protobuf::Message {
 public:
  select_table_request();
  virtual ~select_table_request();

  select_table_request(const select_table_request& from);

  inline select_table_request& operator=(const select_table_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const select_table_request& default_instance();

  void Swap(select_table_request* other);

  // implements Message ----------------------------------------------

  select_table_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const select_table_request& from);
  void MergeFrom(const select_table_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 table_number = 1;
  inline bool has_table_number() const;
  inline void clear_table_number();
  static const int kTableNumberFieldNumber = 1;
  inline ::google::protobuf::int32 table_number() const;
  inline void set_table_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chess_protocal.select_table_request)
 private:
  inline void set_has_table_number();
  inline void clear_has_table_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 table_number_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static select_table_request* default_instance_;
};
// -------------------------------------------------------------------

class select_table_response : public ::google::protobuf::Message {
 public:
  select_table_response();
  virtual ~select_table_response();

  select_table_response(const select_table_response& from);

  inline select_table_response& operator=(const select_table_response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const select_table_response& default_instance();

  void Swap(select_table_response* other);

  // implements Message ----------------------------------------------

  select_table_response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const select_table_response& from);
  void MergeFrom(const select_table_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 response_code = 1;
  inline bool has_response_code() const;
  inline void clear_response_code();
  static const int kResponseCodeFieldNumber = 1;
  inline ::google::protobuf::int32 response_code() const;
  inline void set_response_code(::google::protobuf::int32 value);

  // optional string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:chess_protocal.select_table_response)
 private:
  inline void set_has_response_code();
  inline void clear_has_response_code();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  ::google::protobuf::int32 response_code_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static select_table_response* default_instance_;
};
// -------------------------------------------------------------------

class playing_chess_request : public ::google::protobuf::Message {
 public:
  playing_chess_request();
  virtual ~playing_chess_request();

  playing_chess_request(const playing_chess_request& from);

  inline playing_chess_request& operator=(const playing_chess_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const playing_chess_request& default_instance();

  void Swap(playing_chess_request* other);

  // implements Message ----------------------------------------------

  playing_chess_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const playing_chess_request& from);
  void MergeFrom(const playing_chess_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hall_number = 1;
  inline bool has_hall_number() const;
  inline void clear_hall_number();
  static const int kHallNumberFieldNumber = 1;
  inline ::google::protobuf::int32 hall_number() const;
  inline void set_hall_number(::google::protobuf::int32 value);

  // required int32 table_number = 2;
  inline bool has_table_number() const;
  inline void clear_table_number();
  static const int kTableNumberFieldNumber = 2;
  inline ::google::protobuf::int32 table_number() const;
  inline void set_table_number(::google::protobuf::int32 value);

  // optional int32 game_stat = 3;
  inline bool has_game_stat() const;
  inline void clear_game_stat();
  static const int kGameStatFieldNumber = 3;
  inline ::google::protobuf::int32 game_stat() const;
  inline void set_game_stat(::google::protobuf::int32 value);

  // optional int32 x_pos = 4;
  inline bool has_x_pos() const;
  inline void clear_x_pos();
  static const int kXPosFieldNumber = 4;
  inline ::google::protobuf::int32 x_pos() const;
  inline void set_x_pos(::google::protobuf::int32 value);

  // optional int32 y_pos = 5;
  inline bool has_y_pos() const;
  inline void clear_y_pos();
  static const int kYPosFieldNumber = 5;
  inline ::google::protobuf::int32 y_pos() const;
  inline void set_y_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chess_protocal.playing_chess_request)
 private:
  inline void set_has_hall_number();
  inline void clear_has_hall_number();
  inline void set_has_table_number();
  inline void clear_has_table_number();
  inline void set_has_game_stat();
  inline void clear_has_game_stat();
  inline void set_has_x_pos();
  inline void clear_has_x_pos();
  inline void set_has_y_pos();
  inline void clear_has_y_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 hall_number_;
  ::google::protobuf::int32 table_number_;
  ::google::protobuf::int32 game_stat_;
  ::google::protobuf::int32 x_pos_;
  ::google::protobuf::int32 y_pos_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static playing_chess_request* default_instance_;
};
// -------------------------------------------------------------------

class playing_chess_response : public ::google::protobuf::Message {
 public:
  playing_chess_response();
  virtual ~playing_chess_response();

  playing_chess_response(const playing_chess_response& from);

  inline playing_chess_response& operator=(const playing_chess_response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const playing_chess_response& default_instance();

  void Swap(playing_chess_response* other);

  // implements Message ----------------------------------------------

  playing_chess_response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const playing_chess_response& from);
  void MergeFrom(const playing_chess_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 response_code = 1;
  inline bool has_response_code() const;
  inline void clear_response_code();
  static const int kResponseCodeFieldNumber = 1;
  inline ::google::protobuf::int32 response_code() const;
  inline void set_response_code(::google::protobuf::int32 value);

  // optional string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // required int32 game_stat = 3;
  inline bool has_game_stat() const;
  inline void clear_game_stat();
  static const int kGameStatFieldNumber = 3;
  inline ::google::protobuf::int32 game_stat() const;
  inline void set_game_stat(::google::protobuf::int32 value);

  // optional int32 x_pos = 4;
  inline bool has_x_pos() const;
  inline void clear_x_pos();
  static const int kXPosFieldNumber = 4;
  inline ::google::protobuf::int32 x_pos() const;
  inline void set_x_pos(::google::protobuf::int32 value);

  // optional int32 y_pos = 5;
  inline bool has_y_pos() const;
  inline void clear_y_pos();
  static const int kYPosFieldNumber = 5;
  inline ::google::protobuf::int32 y_pos() const;
  inline void set_y_pos(::google::protobuf::int32 value);

  // optional int32 rows = 6;
  inline bool has_rows() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 6;
  inline ::google::protobuf::int32 rows() const;
  inline void set_rows(::google::protobuf::int32 value);

  // optional int32 columns = 7;
  inline bool has_columns() const;
  inline void clear_columns();
  static const int kColumnsFieldNumber = 7;
  inline ::google::protobuf::int32 columns() const;
  inline void set_columns(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chess_protocal.playing_chess_response)
 private:
  inline void set_has_response_code();
  inline void clear_has_response_code();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_game_stat();
  inline void clear_has_game_stat();
  inline void set_has_x_pos();
  inline void clear_has_x_pos();
  inline void set_has_y_pos();
  inline void clear_has_y_pos();
  inline void set_has_rows();
  inline void clear_has_rows();
  inline void set_has_columns();
  inline void clear_has_columns();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  ::google::protobuf::int32 response_code_;
  ::google::protobuf::int32 game_stat_;
  ::google::protobuf::int32 x_pos_;
  ::google::protobuf::int32 y_pos_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 columns_;
  friend void  protobuf_AddDesc_chess_2eproto();
  friend void protobuf_AssignDesc_chess_2eproto();
  friend void protobuf_ShutdownFile_chess_2eproto();

  void InitAsDefaultInstance();
  static playing_chess_response* default_instance_;
};
// ===================================================================


// ===================================================================

// login_request

// required string UserID = 1;
inline bool login_request::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_request::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login_request::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login_request::clear_userid() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& login_request::userid() const {
  // @@protoc_insertion_point(field_get:chess_protocal.login_request.UserID)
  return *userid_;
}
inline void login_request::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set:chess_protocal.login_request.UserID)
}
inline void login_request::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
  // @@protoc_insertion_point(field_set_char:chess_protocal.login_request.UserID)
}
inline void login_request::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chess_protocal.login_request.UserID)
}
inline ::std::string* login_request::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chess_protocal.login_request.UserID)
  return userid_;
}
inline ::std::string* login_request::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void login_request::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chess_protocal.login_request.UserID)
}

// required string PassWord = 2;
inline bool login_request::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_request::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void login_request::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void login_request::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& login_request::password() const {
  // @@protoc_insertion_point(field_get:chess_protocal.login_request.PassWord)
  return *password_;
}
inline void login_request::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:chess_protocal.login_request.PassWord)
}
inline void login_request::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:chess_protocal.login_request.PassWord)
}
inline void login_request::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chess_protocal.login_request.PassWord)
}
inline ::std::string* login_request::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chess_protocal.login_request.PassWord)
  return password_;
}
inline ::std::string* login_request::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void login_request::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chess_protocal.login_request.PassWord)
}

// -------------------------------------------------------------------

// login_response

// required int32 response_code = 1;
inline bool login_response::has_response_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void login_response::set_has_response_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void login_response::clear_has_response_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void login_response::clear_response_code() {
  response_code_ = 0;
  clear_has_response_code();
}
inline ::google::protobuf::int32 login_response::response_code() const {
  // @@protoc_insertion_point(field_get:chess_protocal.login_response.response_code)
  return response_code_;
}
inline void login_response::set_response_code(::google::protobuf::int32 value) {
  set_has_response_code();
  response_code_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.login_response.response_code)
}

// optional string data = 2;
inline bool login_response::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void login_response::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void login_response::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void login_response::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& login_response::data() const {
  // @@protoc_insertion_point(field_get:chess_protocal.login_response.data)
  return *data_;
}
inline void login_response::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:chess_protocal.login_response.data)
}
inline void login_response::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:chess_protocal.login_response.data)
}
inline void login_response::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chess_protocal.login_response.data)
}
inline ::std::string* login_response::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chess_protocal.login_response.data)
  return data_;
}
inline ::std::string* login_response::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void login_response::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chess_protocal.login_response.data)
}

// -------------------------------------------------------------------

// select_hall_request

// required int32 hall_number = 1;
inline bool select_hall_request::has_hall_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void select_hall_request::set_has_hall_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void select_hall_request::clear_has_hall_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void select_hall_request::clear_hall_number() {
  hall_number_ = 0;
  clear_has_hall_number();
}
inline ::google::protobuf::int32 select_hall_request::hall_number() const {
  // @@protoc_insertion_point(field_get:chess_protocal.select_hall_request.hall_number)
  return hall_number_;
}
inline void select_hall_request::set_hall_number(::google::protobuf::int32 value) {
  set_has_hall_number();
  hall_number_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.select_hall_request.hall_number)
}

// -------------------------------------------------------------------

// select_hall_response

// required int32 response_code = 1;
inline bool select_hall_response::has_response_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void select_hall_response::set_has_response_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void select_hall_response::clear_has_response_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void select_hall_response::clear_response_code() {
  response_code_ = 0;
  clear_has_response_code();
}
inline ::google::protobuf::int32 select_hall_response::response_code() const {
  // @@protoc_insertion_point(field_get:chess_protocal.select_hall_response.response_code)
  return response_code_;
}
inline void select_hall_response::set_response_code(::google::protobuf::int32 value) {
  set_has_response_code();
  response_code_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.select_hall_response.response_code)
}

// optional string data = 2;
inline bool select_hall_response::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void select_hall_response::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void select_hall_response::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void select_hall_response::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& select_hall_response::data() const {
  // @@protoc_insertion_point(field_get:chess_protocal.select_hall_response.data)
  return *data_;
}
inline void select_hall_response::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:chess_protocal.select_hall_response.data)
}
inline void select_hall_response::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:chess_protocal.select_hall_response.data)
}
inline void select_hall_response::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chess_protocal.select_hall_response.data)
}
inline ::std::string* select_hall_response::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chess_protocal.select_hall_response.data)
  return data_;
}
inline ::std::string* select_hall_response::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void select_hall_response::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chess_protocal.select_hall_response.data)
}

// -------------------------------------------------------------------

// select_table_request

// required int32 table_number = 1;
inline bool select_table_request::has_table_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void select_table_request::set_has_table_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void select_table_request::clear_has_table_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void select_table_request::clear_table_number() {
  table_number_ = 0;
  clear_has_table_number();
}
inline ::google::protobuf::int32 select_table_request::table_number() const {
  // @@protoc_insertion_point(field_get:chess_protocal.select_table_request.table_number)
  return table_number_;
}
inline void select_table_request::set_table_number(::google::protobuf::int32 value) {
  set_has_table_number();
  table_number_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.select_table_request.table_number)
}

// -------------------------------------------------------------------

// select_table_response

// required int32 response_code = 1;
inline bool select_table_response::has_response_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void select_table_response::set_has_response_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void select_table_response::clear_has_response_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void select_table_response::clear_response_code() {
  response_code_ = 0;
  clear_has_response_code();
}
inline ::google::protobuf::int32 select_table_response::response_code() const {
  // @@protoc_insertion_point(field_get:chess_protocal.select_table_response.response_code)
  return response_code_;
}
inline void select_table_response::set_response_code(::google::protobuf::int32 value) {
  set_has_response_code();
  response_code_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.select_table_response.response_code)
}

// optional string data = 2;
inline bool select_table_response::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void select_table_response::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void select_table_response::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void select_table_response::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& select_table_response::data() const {
  // @@protoc_insertion_point(field_get:chess_protocal.select_table_response.data)
  return *data_;
}
inline void select_table_response::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:chess_protocal.select_table_response.data)
}
inline void select_table_response::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:chess_protocal.select_table_response.data)
}
inline void select_table_response::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chess_protocal.select_table_response.data)
}
inline ::std::string* select_table_response::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chess_protocal.select_table_response.data)
  return data_;
}
inline ::std::string* select_table_response::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void select_table_response::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chess_protocal.select_table_response.data)
}

// -------------------------------------------------------------------

// playing_chess_request

// required int32 hall_number = 1;
inline bool playing_chess_request::has_hall_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void playing_chess_request::set_has_hall_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void playing_chess_request::clear_has_hall_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void playing_chess_request::clear_hall_number() {
  hall_number_ = 0;
  clear_has_hall_number();
}
inline ::google::protobuf::int32 playing_chess_request::hall_number() const {
  // @@protoc_insertion_point(field_get:chess_protocal.playing_chess_request.hall_number)
  return hall_number_;
}
inline void playing_chess_request::set_hall_number(::google::protobuf::int32 value) {
  set_has_hall_number();
  hall_number_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.playing_chess_request.hall_number)
}

// required int32 table_number = 2;
inline bool playing_chess_request::has_table_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void playing_chess_request::set_has_table_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void playing_chess_request::clear_has_table_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void playing_chess_request::clear_table_number() {
  table_number_ = 0;
  clear_has_table_number();
}
inline ::google::protobuf::int32 playing_chess_request::table_number() const {
  // @@protoc_insertion_point(field_get:chess_protocal.playing_chess_request.table_number)
  return table_number_;
}
inline void playing_chess_request::set_table_number(::google::protobuf::int32 value) {
  set_has_table_number();
  table_number_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.playing_chess_request.table_number)
}

// optional int32 game_stat = 3;
inline bool playing_chess_request::has_game_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void playing_chess_request::set_has_game_stat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void playing_chess_request::clear_has_game_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void playing_chess_request::clear_game_stat() {
  game_stat_ = 0;
  clear_has_game_stat();
}
inline ::google::protobuf::int32 playing_chess_request::game_stat() const {
  // @@protoc_insertion_point(field_get:chess_protocal.playing_chess_request.game_stat)
  return game_stat_;
}
inline void playing_chess_request::set_game_stat(::google::protobuf::int32 value) {
  set_has_game_stat();
  game_stat_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.playing_chess_request.game_stat)
}

// optional int32 x_pos = 4;
inline bool playing_chess_request::has_x_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void playing_chess_request::set_has_x_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void playing_chess_request::clear_has_x_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void playing_chess_request::clear_x_pos() {
  x_pos_ = 0;
  clear_has_x_pos();
}
inline ::google::protobuf::int32 playing_chess_request::x_pos() const {
  // @@protoc_insertion_point(field_get:chess_protocal.playing_chess_request.x_pos)
  return x_pos_;
}
inline void playing_chess_request::set_x_pos(::google::protobuf::int32 value) {
  set_has_x_pos();
  x_pos_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.playing_chess_request.x_pos)
}

// optional int32 y_pos = 5;
inline bool playing_chess_request::has_y_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void playing_chess_request::set_has_y_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void playing_chess_request::clear_has_y_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void playing_chess_request::clear_y_pos() {
  y_pos_ = 0;
  clear_has_y_pos();
}
inline ::google::protobuf::int32 playing_chess_request::y_pos() const {
  // @@protoc_insertion_point(field_get:chess_protocal.playing_chess_request.y_pos)
  return y_pos_;
}
inline void playing_chess_request::set_y_pos(::google::protobuf::int32 value) {
  set_has_y_pos();
  y_pos_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.playing_chess_request.y_pos)
}

// -------------------------------------------------------------------

// playing_chess_response

// required int32 response_code = 1;
inline bool playing_chess_response::has_response_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void playing_chess_response::set_has_response_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void playing_chess_response::clear_has_response_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void playing_chess_response::clear_response_code() {
  response_code_ = 0;
  clear_has_response_code();
}
inline ::google::protobuf::int32 playing_chess_response::response_code() const {
  // @@protoc_insertion_point(field_get:chess_protocal.playing_chess_response.response_code)
  return response_code_;
}
inline void playing_chess_response::set_response_code(::google::protobuf::int32 value) {
  set_has_response_code();
  response_code_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.playing_chess_response.response_code)
}

// optional string data = 2;
inline bool playing_chess_response::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void playing_chess_response::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void playing_chess_response::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void playing_chess_response::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& playing_chess_response::data() const {
  // @@protoc_insertion_point(field_get:chess_protocal.playing_chess_response.data)
  return *data_;
}
inline void playing_chess_response::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:chess_protocal.playing_chess_response.data)
}
inline void playing_chess_response::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:chess_protocal.playing_chess_response.data)
}
inline void playing_chess_response::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chess_protocal.playing_chess_response.data)
}
inline ::std::string* playing_chess_response::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chess_protocal.playing_chess_response.data)
  return data_;
}
inline ::std::string* playing_chess_response::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void playing_chess_response::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chess_protocal.playing_chess_response.data)
}

// required int32 game_stat = 3;
inline bool playing_chess_response::has_game_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void playing_chess_response::set_has_game_stat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void playing_chess_response::clear_has_game_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void playing_chess_response::clear_game_stat() {
  game_stat_ = 0;
  clear_has_game_stat();
}
inline ::google::protobuf::int32 playing_chess_response::game_stat() const {
  // @@protoc_insertion_point(field_get:chess_protocal.playing_chess_response.game_stat)
  return game_stat_;
}
inline void playing_chess_response::set_game_stat(::google::protobuf::int32 value) {
  set_has_game_stat();
  game_stat_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.playing_chess_response.game_stat)
}

// optional int32 x_pos = 4;
inline bool playing_chess_response::has_x_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void playing_chess_response::set_has_x_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void playing_chess_response::clear_has_x_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void playing_chess_response::clear_x_pos() {
  x_pos_ = 0;
  clear_has_x_pos();
}
inline ::google::protobuf::int32 playing_chess_response::x_pos() const {
  // @@protoc_insertion_point(field_get:chess_protocal.playing_chess_response.x_pos)
  return x_pos_;
}
inline void playing_chess_response::set_x_pos(::google::protobuf::int32 value) {
  set_has_x_pos();
  x_pos_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.playing_chess_response.x_pos)
}

// optional int32 y_pos = 5;
inline bool playing_chess_response::has_y_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void playing_chess_response::set_has_y_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void playing_chess_response::clear_has_y_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void playing_chess_response::clear_y_pos() {
  y_pos_ = 0;
  clear_has_y_pos();
}
inline ::google::protobuf::int32 playing_chess_response::y_pos() const {
  // @@protoc_insertion_point(field_get:chess_protocal.playing_chess_response.y_pos)
  return y_pos_;
}
inline void playing_chess_response::set_y_pos(::google::protobuf::int32 value) {
  set_has_y_pos();
  y_pos_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.playing_chess_response.y_pos)
}

// optional int32 rows = 6;
inline bool playing_chess_response::has_rows() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void playing_chess_response::set_has_rows() {
  _has_bits_[0] |= 0x00000020u;
}
inline void playing_chess_response::clear_has_rows() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void playing_chess_response::clear_rows() {
  rows_ = 0;
  clear_has_rows();
}
inline ::google::protobuf::int32 playing_chess_response::rows() const {
  // @@protoc_insertion_point(field_get:chess_protocal.playing_chess_response.rows)
  return rows_;
}
inline void playing_chess_response::set_rows(::google::protobuf::int32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.playing_chess_response.rows)
}

// optional int32 columns = 7;
inline bool playing_chess_response::has_columns() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void playing_chess_response::set_has_columns() {
  _has_bits_[0] |= 0x00000040u;
}
inline void playing_chess_response::clear_has_columns() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void playing_chess_response::clear_columns() {
  columns_ = 0;
  clear_has_columns();
}
inline ::google::protobuf::int32 playing_chess_response::columns() const {
  // @@protoc_insertion_point(field_get:chess_protocal.playing_chess_response.columns)
  return columns_;
}
inline void playing_chess_response::set_columns(::google::protobuf::int32 value) {
  set_has_columns();
  columns_ = value;
  // @@protoc_insertion_point(field_set:chess_protocal.playing_chess_response.columns)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chess_protocal

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chess_2eproto__INCLUDED
